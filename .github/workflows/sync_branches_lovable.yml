name: Sync Public and Internal Branches (Lovable-compatible)

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  sync-public:
    runs-on: ubuntu-latest
    env:
      PUBLIC_PRUNE: |
        knowledge-base
        scripts
        docs
        src/pages/InternalHome.tsx
        src/pages/InternalHomeNew.tsx
        src/pages/LeadDetail.tsx
        src/pages/LeadIntelligence.tsx
        src/pages/LeadsPipeline.tsx
        src/pages/JobsCalendar.tsx
        src/pages/QuoteBuilderNew.tsx
        src/pages/QuoteDocumentViewer.tsx
        src/pages/ReportsAnalytics.tsx
        src/pages/Nexus.tsx
        src/pages/NexusDemo.tsx
        src/pages/MarketingStudio.tsx
        src/pages/MediaLibrary.tsx
        src/pages/MeasurementTool.tsx
        src/pages/ImageGenerator.tsx
        src/pages/InspectionForm.tsx
        src/pages/DocsHub.tsx
        src/pages/FormsStudio.tsx
        src/pages/DataHub.tsx
        src/components/InternalSidebar.tsx
        src/components/InternalHeader.tsx
        src/components/InternalLayout.tsx
        src/components/InternalLayoutNew.tsx
        src/components/InternalChatAssistant.tsx
        src/components/AuthGuard.tsx
        src/components/ProtectedRoute.tsx
        src/components/InternalGate.tsx
        src/components/LeadDetailDrawer.tsx
        src/components/LeadFilters.tsx
        src/components/LeadBulkActions.tsx
        src/components/LeadActivityTimeline.tsx
        src/components/LeadTaskDialog.tsx
        src/components/ProfessionalQuoteBuilder.tsx
        src/components/QuoteBuilderDialog.tsx
        src/components/QuoteEditor.tsx
        src/components/QuotePreferencesForm.tsx
        src/components/QuoteChatPanel.tsx
        src/components/ReportsDataTable.tsx
        src/components/ReportCard.tsx
        src/components/quote-builder
        src/pages/login
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Prepare deploy-public
        run: |
          set -euo pipefail
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout main
          git branch -f deploy-public HEAD || true
          git checkout deploy-public

          while read -r p; do
            [ -z "$p" ] && continue || true
            echo "Pruning: $p"
            rm -rf "$p" || true
          done <<< "$PUBLIC_PRUNE"

          mkdir -p src/constants
          cat > src/constants/brand.ts <<'EOF'
          export const BRAND = {
            name: "Call Kaids Roofing",
            abn: "39475055075",
            phone: "0435 900 709",
            email: "info@callkaidsroofing.com.au",
            colours: ["#007ACC","#0B3B69","#111827","#6B7280","#F7F8FA","#FFFFFF"],
            slogan: "Proof In Every Roof"
          } as const;
          EOF

          git add -A
          git commit -m "Auto-sync: Public-only build from main" || echo 'No public changes'
          git push origin HEAD:deploy-public --force

  sync-internal:
    runs-on: ubuntu-latest
    env:
      INTERNAL_PRUNE: |
        src/pages/Index.tsx
        src/pages/About.tsx
        src/pages/Services.tsx
        src/pages/ServiceDetail.tsx
        src/pages/SuburbDetail.tsx
        src/pages/Blog.tsx
        src/pages/BlogPost.tsx
        src/pages/Contact.tsx
        src/pages/Gallery.tsx
        src/pages/LandingPage.tsx
        src/pages/RestorationLanding.tsx
        src/pages/Warranty.tsx
        src/pages/Emergency.tsx
        src/pages/ThankYou.tsx
        src/pages/BookingPage.tsx
        src/pages/services
        src/components/ElegantLayout.tsx
        src/components/Header.tsx
        src/components/Footer.tsx
        src/components/ElegantSidebar.tsx
        src/components/MeetKaidyn.tsx
        src/components/MaterialsBrands.tsx
        src/components/ProcessOverview.tsx
        src/components/TrustIndicators.tsx
        src/components/ProofStrip.tsx
        src/components/PremiumCTASection.tsx
        src/components/CompactServiceAreas.tsx
        src/components/CompactTestimonials.tsx
        src/components/FeaturedGallery.tsx
        src/components/CaseStudyShowcase.tsx
        src/components/FomoBanner.tsx
        src/components/BeforeAfterSlider.tsx
        src/components/ServiceCard.tsx
        src/components/TestimonialCard.tsx
        src/components/EnhancedServiceSection.tsx
        src/components/OptimizedBackgroundSection.tsx
        src/components/ParticleSystem.tsx
        src/components/DecorativeIcons.tsx
        src/data/blogPosts.ts
        src/data/caseStudies.ts
        src/assets
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Prepare deploy-internal
        run: |
          set -euo pipefail
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout main
          git branch -f deploy-internal HEAD || true
          git checkout deploy-internal

          while read -r p; do
            [ -z "$p" ] && continue || true
            echo "Pruning: $p"
            rm -rf "$p" || true
          done <<< "$INTERNAL_PRUNE"

          mkdir -p public
          printf 'User-agent: *\nDisallow: /\n' > public/robots.txt

          if [ ! -f src/pages/login/index.tsx ]; then
            mkdir -p src/pages/login
            cat > src/pages/login/index.tsx <<'EOF'
          import { useState, useEffect } from 'react';
          import { supabase } from '../../lib/supabase';
          export default function Login() {
            const [email, setEmail] = useState('');
            const [sent, setSent] = useState(false);
            const [redirect, setRedirect] = useState('/internal');
            useEffect(() => {
              const r = new URLSearchParams(window.location.search).get('redirect');
              if (r) setRedirect(r);
            }, []);
            async function onSubmit(e: React.FormEvent) {
              e.preventDefault();
              await supabase.auth.signInWithOtp({
                email,
                options: { emailRedirectTo: `${window.location.origin}${redirect}` }
              });
              setSent(true);
            }
            return (
              <main style={{ minHeight:'60vh', display:'grid', placeItems:'center', padding:'2rem' }}>
                <form onSubmit={onSubmit} style={{ width:'100%', maxWidth:420 }}>
                  <h1 style={{ marginBottom:12 }}>Sign in</h1>
                  <input type="email" required placeholder="you@example.com"
                    value={email} onChange={e=>setEmail(e.target.value)}
                    style={{ width:'100%', padding:10, margin:'8px 0' }} />
                  <button style={{ width:'100%', padding:10 }}>Send magic link</button>
                  {sent && <p style={{ marginTop:8 }}>Check your email for a login link.</p>}
                </form>
              </main>
            );
          }
          EOF
          fi

          git add -A
          git commit -m "Auto-sync: Internal-only build from main" || echo 'No internal changes'
          git push origin HEAD:deploy-internal --force
